name: Build Windows Desktop App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.27.1'

jobs:
  build-windows:
    name: Build Windows App
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Verify Flutter installation
      run: |
        echo "=== Flutter Version ==="
        flutter --version
        echo ""
        echo "=== Flutter Doctor ==="
        flutter doctor -v
        
    - name: Enable Windows desktop
      run: |
        echo "Enabling Windows desktop support..."
        flutter config --enable-windows-desktop
        
    - name: Get Flutter dependencies
      run: |
        echo "Getting Flutter dependencies..."
        flutter pub get
        echo "Dependencies installed successfully"
        
    - name: Verify project structure
      run: |
        echo "=== Project Structure ==="
        echo "Current directory: $(Get-Location)"
        echo ""
        echo "=== Windows directory ==="
        if (Test-Path "windows") {
          Get-ChildItem "windows" -Recurse | Select-Object Name, Mode, Length
        } else {
          echo "ERROR: Windows directory not found"
          exit 1
        }
        
    - name: Run Flutter tests
      run: |
        echo "Running Flutter tests..."
        flutter test --coverage || echo "Tests completed with warnings"
      continue-on-error: true
      
    - name: Analyze Flutter code
      run: |
        echo "Analyzing Flutter code..."
        flutter analyze || echo "Analysis completed with warnings"
      continue-on-error: true
      
    - name: Build Windows app
      run: |
        echo "Building Windows app..."
        flutter build windows --release --verbose
        
    - name: Verify build output
      run: |
        echo "=== Build Output Verification ==="
        echo "Current directory: $(Get-Location)"
        echo ""
        echo "=== Build directory structure ==="
        if (Test-Path "build") {
          Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
        } else {
          echo "ERROR: Build directory not found"
          exit 1
        }
        echo ""
        echo "=== Windows build contents ==="
        if (Test-Path "build\windows") {
          Get-ChildItem "build\windows" -Recurse | Select-Object Name, Mode, Length
        } else {
          echo "ERROR: Windows build directory not found"
          exit 1
        }
        
    - name: Get app version
      id: get_version
      run: |
        $version = (Get-Content pubspec.yaml | Select-String "version:" | ForEach-Object { $_.Line.Split(":")[1].Trim() })
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "App version: $version"
        
    - name: Create Windows installer package
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipName = "PhotoApp-Windows-v$version.zip"
        echo "Creating Windows package: $zipName"
        
        # Find the main executable directory
        $buildDir = "build\windows\x64\runner\Release"
        if (Test-Path $buildDir) {
          echo "Found build directory: $buildDir"
          $sourceDir = $buildDir
        } else {
          # Fallback: search for executable files
          $exeFiles = Get-ChildItem "build" -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles.Count -gt 0) {
            $mainExe = $exeFiles | Where-Object { $_.Name -like "*photo_app*" -or $_.Name -like "*app*" } | Select-Object -First 1
            if (-not $mainExe) {
              $mainExe = $exeFiles | Select-Object -First 1
            }
            $sourceDir = $mainExe.DirectoryName
            echo "Using directory: $sourceDir"
          } else {
            echo "ERROR: No executable files found"
            exit 1
          }
        }
        
        echo "Source directory: $sourceDir"
        if (Test-Path $sourceDir) {
          echo "Files to package:"
          Get-ChildItem $sourceDir | Select-Object Name, Length
          
          # Create ZIP package
          try {
            # Get all files and directories to compress
            $items = Get-ChildItem -Path $sourceDir
            if ($items.Count -eq 0) {
              echo "ERROR: No files found in $sourceDir"
              exit 1
            }
            
            echo "Creating ZIP archive..."
            # Get all files recursively
            $allFiles = Get-ChildItem -Path $sourceDir -Recurse -File
            if ($allFiles.Count -eq 0) {
              echo "ERROR: No files found to compress"
              exit 1
            }
            
            echo "Found $($allFiles.Count) files to compress"
            # Use -LiteralPath to avoid glob expansion issues
            Compress-Archive -LiteralPath $allFiles.FullName -DestinationPath $zipName -Force
            
            echo "Package created successfully: $zipName"
            
            # Verify package
            if (Test-Path $zipName) {
              $fileInfo = Get-ChildItem $zipName
              echo "Package details:"
              echo "  Name: $($fileInfo.Name)"
              echo "  Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
              echo "  Path: $(Resolve-Path $zipName)"
            } else {
              echo "ERROR: Package was not created"
              exit 1
            }
          } catch {
            echo "ERROR: Failed to create package: $($_.Exception.Message)"
            exit 1
          }
        } else {
          echo "ERROR: Source directory does not exist: $sourceDir"
          exit 1
        }
        
    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v4
      with:
        name: PhotoApp-Windows-v${{ steps.get_version.outputs.version }}
        path: PhotoApp-Windows-v*.zip
        retention-days: 30
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: coverage/
        retention-days: 7
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        name: PhotoApp Windows v${{ steps.get_version.outputs.version }}
        tag_name: v${{ steps.get_version.outputs.version }}
        files: PhotoApp-Windows-v*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## PhotoApp Windows Desktop Application
          
          **Version:** ${{ steps.get_version.outputs.version }}  
          **Build Date:** ${{ github.run_number }}  
          **Commit:** ${{ github.sha }}  
          **Flutter Version:** ${{ env.FLUTTER_VERSION }}
          
          ### Installation
          1. Download the ZIP file below
          2. Extract to any folder (e.g., C:\Program Files\PhotoApp\)
          3. Run photo_app_client.exe
          
          ### System Requirements
          - OS: Windows 10 (version 1903 or later) / Windows 11
          - Architecture: 64-bit (x64)
          - RAM: 4 GB minimum, 8 GB recommended
          - Storage: 1 GB free disk space
          - Graphics: DirectX 11 compatible
          
          ### Features
          - Modern Flutter-based UI
          - Cross-platform compatibility
          - Optimized for Windows desktop
          
          ### Changes
          ${{ github.event.head_commit.message }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
    - name: Notify about artifacts
      if: always()
      run: |
        echo "=== Build Completed ==="
        echo "ZIP file is available in the 'Artifacts' section below"
        echo "Download: PhotoApp-Windows-v${{ steps.get_version.outputs.version }}"
        echo ""
        echo "If release creation failed, you can still download the ZIP file from artifacts"