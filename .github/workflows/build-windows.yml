name: Build Windows Desktop App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

env:
  FLUTTER_VERSION: '3.27.1'

jobs:
  build-windows:
    name: Build Windows App
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Verify Flutter installation
      run: |
        echo "=== Flutter Version ==="
        flutter --version
        echo ""
        echo "=== Flutter Doctor ==="
        flutter doctor -v
        
    - name: Enable Windows desktop
      run: |
        echo "Enabling Windows desktop support..."
        flutter config --enable-windows-desktop
        
    - name: Get Flutter dependencies
      run: |
        echo "Getting Flutter dependencies..."
        flutter pub get
        echo "Dependencies installed successfully"
        
    - name: Verify project structure
      run: |
        echo "=== Project Structure ==="
        echo "Current directory: $(Get-Location)"
        echo ""
        echo "=== Windows directory ==="
        if (Test-Path "windows") {
          Get-ChildItem "windows" -Recurse | Select-Object Name, Mode, Length
        } else {
          echo "ERROR: Windows directory not found"
          exit 1
        }
        
    - name: Run Flutter tests
      run: |
        echo "Running Flutter tests..."
        flutter test --coverage || echo "Tests completed with warnings"
      continue-on-error: true
      
    - name: Analyze Flutter code
      run: |
        echo "Analyzing Flutter code..."
        flutter analyze || echo "Analysis completed with warnings"
      continue-on-error: true
      
    - name: Build Windows app
      run: |
        echo "Building Windows app..."
        flutter build windows --release --verbose
        
    - name: Verify build output
      run: |
        echo "=== Build Output Verification ==="
        echo "Current directory: $(Get-Location)"
        echo ""
        echo "=== Build directory structure ==="
        if (Test-Path "build") {
          Get-ChildItem "build" -Recurse -Directory | Select-Object FullName
        } else {
          echo "ERROR: Build directory not found"
          exit 1
        }
        echo ""
        echo "=== Windows build contents ==="
        if (Test-Path "build\windows") {
          Get-ChildItem "build\windows" -Recurse | Select-Object Name, Mode, Length
        } else {
          echo "ERROR: Windows build directory not found"
          exit 1
        }
        
    - name: Get app version
      id: get_version
      run: |
        $version = (Get-Content pubspec.yaml | Select-String "version:" | ForEach-Object { $_.Line.Split(":")[1].Trim() })
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "App version: $version"
        
    - name: Create Windows installer package
      run: |
        $version = "${{ steps.get_version.outputs.version }}"
        $zipName = "PhotoApp-Windows-v$version.zip"
        echo "Creating Windows package: $zipName"
        
        # Find the main executable directory
        $buildDir = "build\windows\x64\runner\Release"
        if (Test-Path $buildDir) {
          echo "Found build directory: $buildDir"
          $sourceDir = $buildDir
        } else {
          # Fallback: search for executable files
          $exeFiles = Get-ChildItem "build" -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles.Count -gt 0) {
            $mainExe = $exeFiles | Where-Object { $_.Name -like "*photo_app*" -or $_.Name -like "*app*" } | Select-Object -First 1
            if (-not $mainExe) {
              $mainExe = $exeFiles | Select-Object -First 1
            }
            $sourceDir = $mainExe.DirectoryName
            echo "Using directory: $sourceDir"
          } else {
            echo "ERROR: No executable files found"
            exit 1
          }
        }
        
        echo "Source directory: $sourceDir"
        if (Test-Path $sourceDir) {
          echo "Files to package:"
          Get-ChildItem $sourceDir | Select-Object Name, Length
          
          # Create ZIP package
          try {
            # Get all files and directories to compress
            $items = Get-ChildItem -Path $sourceDir
            if ($items.Count -eq 0) {
              echo "ERROR: No files found in $sourceDir"
              exit 1
            }
            
            echo "Creating ZIP archive..."
            # Get all files recursively
            $allFiles = Get-ChildItem -Path $sourceDir -Recurse -File
            if ($allFiles.Count -eq 0) {
              echo "ERROR: No files found to compress"
              exit 1
            }
            
            echo "Found $($allFiles.Count) files to compress"
            # Use -LiteralPath to avoid glob expansion issues
            Compress-Archive -LiteralPath $allFiles.FullName -DestinationPath $zipName -Force
            
            echo "Package created successfully: $zipName"
            
            # Verify package
            if (Test-Path $zipName) {
              $fileInfo = Get-ChildItem $zipName
              echo "Package details:"
              echo "  Name: $($fileInfo.Name)"
              echo "  Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
              echo "  Path: $(Resolve-Path $zipName)"
            } else {
              echo "ERROR: Package was not created"
              exit 1
            }
          } catch {
            echo "ERROR: Failed to create package: $($_.Exception.Message)"
            exit 1
          }
        } else {
          echo "ERROR: Source directory does not exist: $sourceDir"
          exit 1
        }
        
    - name: Setup Chocolatey
      run: |
        echo "Checking for Chocolatey..."
        if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
          echo "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        choco --version
        echo "Chocolatey is ready"
        
    - name: Setup Inno Setup
      run: |
        echo "Installing Inno Setup..."
        choco install innosetup -y --accept-license --limit-output --no-progress
        echo "Inno Setup installed"
        
        # Verify installation
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe"
        )
        
        $found = $false
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            echo "Inno Setup found at: $path"
            $found = $true
            break
          }
        }
        
        if (-not $found) {
          echo "ERROR: Inno Setup installation verification failed"
          echo "Trying alternative method..."
          $isccCheck = Get-Command iscc -ErrorAction SilentlyContinue
          if ($isccCheck) {
            echo "Inno Setup found in PATH"
          } else {
            echo "Inno Setup not found. Installation may have failed."
            exit 1
          }
        }
        
    - name: Find executable and update setup script
      run: |
        echo "Finding the main executable..."
        
        # Try different locations
        $releaseDirs = @(
          "build\windows\x64\runner\Release",
          "build\windows\runner\Release"
        )
        
        $exeName = $null
        $releaseDir = $null
        
        foreach ($dir in $releaseDirs) {
          if (Test-Path $dir) {
            $releaseDir = $dir
            # Find the main .exe file (not uninstaller)
            $exeFiles = Get-ChildItem $dir -Filter "*.exe" -ErrorAction SilentlyContinue | Where-Object { $_.Name -notlike "*uninstall*" -and $_.Name -notlike "*unins*" }
            
            if ($exeFiles.Count -gt 0) {
              $exeName = $exeFiles[0].Name
              echo "Found executable: $exeName in $releaseDir"
              break
            }
          }
        }
        
        if (-not $exeName) {
          echo "ERROR: Could not find main executable"
          echo "Searching for all .exe files in build directory..."
          $allExe = Get-ChildItem "build\windows" -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($allExe) {
            echo "Found .exe files:"
            $allExe | ForEach-Object { echo "  $($_.FullName)" }
          }
          exit 1
        }
        
        # Update setup.iss with the correct executable name
        echo "Updating setup.iss with executable: $exeName"
        $setupContent = Get-Content "setup.iss" -Raw
        
        # Replace all occurrences of the executable name in Icons and Run sections
        $setupContent = $setupContent -replace 'runner\.exe', $exeName
        $setupContent = $setupContent -replace 'photo_app_client\.exe', $exeName
        $setupContent = $setupContent -replace 'photo_app\.exe', $exeName
        
        Set-Content "setup.iss" -Value $setupContent -NoNewline
        echo "setup.iss updated successfully"
        
        # Set the exe name as an output for later steps
        echo "EXE_NAME=$exeName" >> $env:GITHUB_ENV
        
    - name: Create Windows installer
      run: |
        echo "Creating installer with Inno Setup..."
        $version = "${{ steps.get_version.outputs.version }}"
        $exeName = $env:EXE_NAME
        
        echo "Using executable: $exeName"
        
        # Create installer directory if it doesn't exist
        if (-not (Test-Path "installer")) {
          New-Item -ItemType Directory -Path "installer" | Out-Null
          echo "Created installer directory"
        }
        
        # Try to find Inno Setup
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
        )
        
        $iscc = $null
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            $iscc = $path
            echo "Found Inno Setup at: $iscc"
            break
          }
        }
        
        if (-not $iscc) {
          echo "ERROR: Inno Setup not found"
          exit 1
        }
        
        echo "Compiling installer with: $iscc"
        echo "Setup script: setup.iss"
        echo "Output name: PhotoApp_Setup_$version"
        
        # Run Inno Setup compiler
        $result = & $iscc setup.iss /O"installer" /F"PhotoApp_Setup_$version" 2>&1 | ForEach-Object {
          if ($_ -is [string]) {
            echo $_
          } else {
            $_.ToString()
          }
        }
        
        # Check for created installer
        $installerFiles = Get-ChildItem "installer" -Filter "PhotoApp_Setup_*.exe" -ErrorAction SilentlyContinue
        if ($installerFiles.Count -gt 0) {
          echo "✅ Installer created successfully!"
          foreach ($file in $installerFiles) {
            $fileInfo = Get-ChildItem $file.FullName
            echo "  File: $($fileInfo.Name)"
            echo "  Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          }
        } else {
          echo "❌ ERROR: Installer was not created"
          echo "Contents of installer directory:"
          Get-ChildItem "installer" -ErrorAction SilentlyContinue | ForEach-Object { echo "  $($_.Name)" }
          exit 1
        }
        
    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v4
      with:
        name: PhotoApp-Windows-v${{ steps.get_version.outputs.version }}
        path: PhotoApp-Windows-v*.zip
        retention-days: 30
        
    - name: Upload Windows installer
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: PhotoApp-Installer-v${{ steps.get_version.outputs.version }}
        path: installer/*.exe
        if-no-files-found: warn
        retention-days: 30
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: coverage/
        retention-days: 7
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        name: PhotoApp Windows v${{ steps.get_version.outputs.version }}
        tag_name: v${{ steps.get_version.outputs.version }}
        files: |
          PhotoApp-Windows-v*.zip
          installer/*.exe
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## PhotoApp Windows Desktop Application
          
          **Version:** ${{ steps.get_version.outputs.version }}  
          **Build Date:** ${{ github.run_number }}  
          **Commit:** ${{ github.sha }}  
          **Flutter Version:** ${{ env.FLUTTER_VERSION }}
          
          ### 🚀 Installation Options
          
          **Option 1: Installer (Recommended)**
          1. Download `PhotoApp_Setup_*.exe`
          2. Run the installer
          3. Follow the installation wizard
          4. Launch PhotoApp from Start menu or desktop shortcut
          
          **Option 2: Portable ZIP**
          1. Download `PhotoApp-Windows-v*.zip`
          2. Extract to any folder (e.g., C:\Program Files\PhotoApp\)
          3. Run `photo_app_client.exe`
          
          ### 💻 System Requirements
          - OS: Windows 10 (version 1903 or later) / Windows 11
          - Architecture: 64-bit (x64)
          - RAM: 4 GB minimum, 8 GB recommended
          - Storage: 1 GB free disk space
          - Graphics: DirectX 11 compatible
          
          ### ✨ Features
          - Modern Flutter-based UI
          - Cross-platform compatibility
          - Optimized for Windows desktop
          - Easy installation with installer
          
          ### 📝 Changes
          ${{ github.event.head_commit.message }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
    - name: Notify about artifacts
      if: always()
      run: |
        echo "=== Build Completed ==="
        echo "Files are available in the 'Artifacts' section below"
        echo ""
        echo "Available downloads:"
        echo "1. PhotoApp-Windows-v${{ steps.get_version.outputs.version }} (ZIP archive)"
        echo "2. PhotoApp-Installer-v${{ steps.get_version.outputs.version }} (Installer)"
        echo ""
        echo "The installer is recommended for easy installation!"
        echo ""
        echo "If release creation failed, you can still download files from artifacts"