import 'package:flutter/foundation.dart';
import 'package:photo_app/core/constants/environment.dart';

class File {
  final int id;
  final String filename;
  final String originalName;
  final int size;
  final String mimetype;
  final String? deletedAt;
  final String url;
  final String? thumbnailUrl;
  File({
    required this.id,
    required this.filename,
    required this.originalName,
    required this.size,
    required this.mimetype,
    this.deletedAt,
    required this.url,
    this.thumbnailUrl,
  });

  factory File.fromJson(Map<String, dynamic>? json) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null
    if (json == null) {
      if (kDebugMode) {
        print('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω null –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞');
      }
      throw Exception('File data is null');
    }

    if (kDebugMode) {
      print('–ü–∞—Ä—Å–∏–º File –∏–∑ JSON: $json');
    }

    try {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
      final idValue = json['id'];
      final id = idValue is int 
          ? idValue 
          : (idValue is num ? idValue.toInt() : 0);
      
      final filenameValue = json['filename'];
      final filename = filenameValue is String ? filenameValue : '';
      
      final originalNameValue = json['originalName'];
      final originalName = originalNameValue is String ? originalNameValue : '';
      
      final sizeValue = json['fileSize'] ?? json['size'];
      final size = sizeValue is int 
          ? sizeValue 
          : (sizeValue is num ? sizeValue.toInt() : 0);
      
      final mimetypeValue = json['mimetype'];
      final mimetype = mimetypeValue is String ? mimetypeValue : '';
      
      final deletedAtValue = json['deletedAt'];
      final deletedAt = deletedAtValue is String ? deletedAtValue : null;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º url, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ path
      final urlValue = json['url'] ?? json['path'];
      final url = urlValue is String ? urlValue : '';
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
      final thumbnailValue = json['thumbnailUrl'] ?? 
                             json['thumbnail_url'] ?? 
                             json['thumbnail'] ?? 
                             json['thumbUrl'] ?? 
                             json['thumb_url'];
      final thumbnail = thumbnailValue is String ? thumbnailValue : null;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–æ–≤)
      if (thumbnail != null && kDebugMode) {
        print('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –¥–ª—è —Ñ–∞–π–ª–∞ $id: $thumbnail');
      }
      
      return File(
        id: id,
        filename: filename,
        originalName: originalName,
        size: size,
        mimetype: mimetype,
        deletedAt: deletedAt,
        url: url,
        thumbnailUrl: thumbnail,
      );
    } catch (e, stackTrace) {
      if (kDebugMode) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ File: $e');
        print('üìã JSON –¥–∞–Ω–Ω—ã–µ: $json');
        print('üìã StackTrace: $stackTrace');
      }
      rethrow;
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  /// –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
  /// –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ—Ç base URL API (–±–µ–∑ /api –≤ –∫–æ–Ω—Ü–µ, —Ç.–∫. —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ /uploads –∏–ª–∏ –¥—Ä—É–≥–æ–º –ø—É—Ç–∏)
  String get fullUrl {
    String processedUrl = url.trim();
    
    // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ URL, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (processedUrl.endsWith('.')) {
      processedUrl = processedUrl.substring(0, processedUrl.length - 1);
    }
    
    if (processedUrl.startsWith('http://') || processedUrl.startsWith('https://')) {
      return processedUrl;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º base URL –±–µ–∑ /api –≤ –∫–æ–Ω—Ü–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    final apiBaseUrl = EnvironmentConfig.apiBaseURL;
    // –£–±–∏—Ä–∞–µ–º /api/ –∏–∑ –∫–æ–Ω—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    final baseUrl = apiBaseUrl.replaceAll(RegExp(r'/api/?$'), '');
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ url –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    final cleanUrl = processedUrl.startsWith('/') ? processedUrl : '/$processedUrl';
    
    return '$baseUrl$cleanUrl';
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  /// –ï—Å–ª–∏ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ—ë, –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  /// –ï—Å–ª–∏ URL —É–∂–µ –ø–æ–ª–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
  /// –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ—Ç base URL API (–±–µ–∑ /api –≤ –∫–æ–Ω—Ü–µ)
  String get fullThumbnailUrl {
    // –ï—Å–ª–∏ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    final thumbnailToProcess = thumbnailUrl ?? url;
    String processedUrl = thumbnailToProcess.trim();
    
    if (processedUrl.isEmpty) {
      if (kDebugMode) {
        print('‚ö†Ô∏è –ü—É—Å—Ç–æ–π URL –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã. ID —Ñ–∞–π–ª–∞: $id');
      }
      return '';
    }
    
    // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ URL, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (processedUrl.endsWith('.')) {
      processedUrl = processedUrl.substring(0, processedUrl.length - 1);
    }
    
    if (processedUrl.startsWith('http://') || processedUrl.startsWith('https://')) {
      // URL —É–∂–µ –ø–æ–ª–Ω—ã–π (CDN –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫)
      if (kIsWeb) {
        print('üì∏ Full thumbnail URL (CDN): $processedUrl');
      }
      return processedUrl;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º base URL –±–µ–∑ /api –≤ –∫–æ–Ω—Ü–µ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    final apiBaseUrl = EnvironmentConfig.apiBaseURL;
    // –£–±–∏—Ä–∞–µ–º /api/ –∏–∑ –∫–æ–Ω—Ü–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    final baseUrl = apiBaseUrl.replaceAll(RegExp(r'/api/?$'), '');
    
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ url –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    final cleanUrl = processedUrl.startsWith('/') ? processedUrl : '/$processedUrl';
    
    final finalUrl = '$baseUrl$cleanUrl';
    
    if (kIsWeb) {
      print('üì∏ Constructed thumbnail URL: $finalUrl');
    }
    
    return finalUrl;
  }
}
