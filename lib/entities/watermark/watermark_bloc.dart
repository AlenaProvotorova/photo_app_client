import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:photo_app/core/helpers/message/display_message.dart';
import 'package:photo_app/data/watermarks/models/watermark.dart';
import 'package:photo_app/data/watermarks/models/get_watermark_req_params.dart';
import 'package:photo_app/data/watermarks/models/remove_watermark_req_params.dart';
import 'package:photo_app/data/watermarks/models/upload_watermark_req_params.dart';
import 'package:photo_app/domain/watermarks/usecases/get_watermark.dart';
import 'package:photo_app/domain/watermarks/usecases/remove_watermark.dart';
import 'package:photo_app/domain/watermarks/usecases/upload_watermark.dart';
import 'package:photo_app/entities/watermark/watermark_event.dart';
import 'package:photo_app/entities/watermark/watermark_state.dart';
import 'package:photo_app/service_locator.dart';

class WatermarkBloc extends Bloc<WatermarkEvent, WatermarkState> {
  WatermarkBloc() : super(WatermarkLoading()) {
    on<LoadWatermark>(_onLoadWatermark);
    on<UploadWatermark>(_onUploadWatermark);
    on<DeleteWatermark>(_onDeleteWatermark);
  }

  Future<void> _onLoadWatermark(
    LoadWatermark event,
    Emitter<WatermarkState> emit,
  ) async {
    emit(WatermarkLoading());
    try {
      print('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${event.userId}');
      final response = await sl<GetWatermarkUseCase>().call(
        params: GetAllWatermarksReqParams(
          userId: int.parse(event.userId),
        ),
      );

      response.fold(
        (error) {
          print('‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: $error');
          emit(WatermarkError(error.toString()));
        },
        (data) {
          print('‚úÖ –£–°–ü–ï–®–ù–û –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
          print('üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
          print('üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö: $data');

          if (data == null) {
            print('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ null - –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            emit(WatermarkLoaded(watermark: null));
            return;
          }

          try {
            print('–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
            print('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö: $data');

            if (data is! List) {
              print('–î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, —Ç–∏–ø: ${data.runtimeType}');
              emit(WatermarkError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫'));
              return;
            }

            final watermarks = <Watermark>[];
            print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${data.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤');

            for (int i = 0; i < data.length; i++) {
              try {
                print('üîç –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç $i: ${data[i]}');
                print('üîç –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ $i: ${data[i].runtimeType}');
                final watermark = Watermark.fromJson(data[i]);
                watermarks.add(watermark);
                print(
                    '‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: ${watermark.filename}');
                print('‚úÖ URL –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ${watermark.url}');
              } catch (itemError) {
                print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ $i: $itemError');
                print('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${data[i]}');
                print('‚ùå –¢–∏–ø –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: ${data[i].runtimeType}');
              }
            }

            print('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤: ${watermarks.length}');

            if (watermarks.isEmpty) {
              print('–°–ø–∏—Å–æ–∫ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—É—Å—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º null');
              emit(WatermarkLoaded(watermark: null));
            } else {
              final watermark = watermarks[0];
              print('–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: ${watermark.filename}');
              print('URL –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ${watermark.url}');
              print('URL –ø—É—Å—Ç–æ–π: ${watermark.url.isEmpty}');

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –≤–∞–ª–∏–¥–µ–Ω (–∏–º–µ–µ—Ç URL)
              if (watermark.url.isEmpty) {
                print('URL –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø—É—Å—Ç–æ–π - —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π');
                emit(WatermarkLoaded(watermark: null));
              } else {
                print('–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –≤–∞–ª–∏–¥–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
                emit(WatermarkLoaded(watermark: watermark));
              }
            }
          } catch (parseError) {
            print('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: $parseError');
            emit(WatermarkError(
                '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ${parseError.toString()}'));
          }
        },
      );
    } catch (e) {
      print('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: $e');
      emit(WatermarkError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ${e.toString()}'));
    }
  }

  Future<void> _onUploadWatermark(
    UploadWatermark event,
    Emitter<WatermarkState> emit,
  ) async {
    emit(WatermarkLoading());
    try {
      final result = await sl<UploadWatermarkUseCase>().call(
        params: UploadWatermarkReqParams(
          userId: int.parse(event.userId),
          formData: FormData.fromMap({
            'file': kIsWeb
                ? MultipartFile.fromBytes(
                    event.image.bytes!,
                    filename: event.image.path,
                  )
                : await MultipartFile.fromFile(event.image.path!),
          }),
        ),
      );

      result.fold(
        (error) {
          emit(WatermarkError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $error'));
          DisplayMessage.showMessage(event.context, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $error');
        },
        (success) {
          add(LoadWatermark(userId: event.userId));
          DisplayMessage.showMessage(
              event.context, '–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
        },
      );
    } catch (e) {
      final errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ${e.toString()}';
      emit(WatermarkError(errorMessage));
      DisplayMessage.showMessage(event.context, errorMessage);
    }
  }

  Future<void> _onDeleteWatermark(
    DeleteWatermark event,
    Emitter<WatermarkState> emit,
  ) async {
    try {
      final result = await sl<RemoveWatermarkUseCase>().call(
        params: RemoveWatermarkReqParams(
          userId: int.parse(event.userId),
        ),
      );

      result.fold(
        (error) => DisplayMessage.showMessage(event.context, error),
        (success) {
          add(LoadWatermark(userId: event.userId));
        },
      );
    } catch (e) {
      emit(WatermarkError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞'));
    }
  }
}
