import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:photo_app/data/users/models/user_list_item.dart';
import 'package:photo_app/domain/users/usecases/get_all_users.dart';
import 'package:photo_app/domain/users/usecases/update_user_is_admin.dart';
import 'package:photo_app/entities/users/bloc/users_event.dart';
import 'package:photo_app/entities/users/bloc/users_state.dart';
import 'package:photo_app/service_locator.dart';

class UsersBloc extends Bloc<UsersEvent, UsersState> {
  UsersBloc() : super(UsersInitial()) {
    on<LoadUsers>(_onLoadUsers);
    on<UpdateUserIsAdmin>(_onUpdateUserIsAdmin);
  }

  Future<void> _onLoadUsers(
    LoadUsers event,
    Emitter<UsersState> emit,
  ) async {
    emit(UsersLoading());
    try {
      print('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      final response = await sl<GetAllUsersUseCase>().call();

      response.fold(
        (error) {
          print('‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $error');
          emit(UsersError(error.toString()));
        },
        (data) {
          print('‚úÖ –£–°–ü–ï–®–ù–û –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
          print('üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${data.runtimeType}');
          print('üìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∞–Ω–Ω—ã—Ö: $data');

          if (data == null) {
            print('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ null - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            emit(UsersLoaded(users: []));
            return;
          }

          try {
            print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');

            final users = <UserListItem>[];
            for (int i = 0; i < data.length; i++) {
              try {
                print('üîç –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $i: ${data[i]}');
                final user = UserListItem.fromJson(data[i]);
                users.add(user);
                print('‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}');
              } catch (itemError) {
                print('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $i: $itemError');
                print('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: ${data[i]}');
              }
            }

            print('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}');
            emit(UsersLoaded(users: users));
          } catch (parseError) {
            print('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: $parseError');
            emit(UsersError(
                '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${parseError.toString()}'));
          }
        },
      );
    } catch (e) {
      print('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $e');
      emit(UsersError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${e.toString()}'));
    }
  }

  Future<void> _onUpdateUserIsAdmin(
    UpdateUserIsAdmin event,
    Emitter<UsersState> emit,
  ) async {
    try {
      // –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      final currentState = state;
      if (currentState is UsersLoaded) {
        final updated = currentState.users.map((u) {
          if (u.id == event.id) {
            return UserListItem(
              id: u.id,
              email: u.email,
              name: u.name,
              isAdmin: event.isAdmin,
              isSuperUser: u.isSuperUser,
              createdAt: u.createdAt,
              updatedAt: u.updatedAt,
            );
          }
          return u;
        }).toList();
        emit(UsersLoaded(users: updated));
      }

      final res = await sl<UpdateUserIsAdminUseCase>().call(
        params: UpdateUserIsAdminParams(id: event.id, isAdmin: event.isAdmin),
      );
      res.fold(
        (error) {
          // –æ—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (currentState is UsersLoaded) {
            emit(currentState);
          }
          add(LoadUsers());
        },
        (_) {
          // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
          add(LoadUsers());
        },
      );
    } catch (_) {
      add(LoadUsers());
    }
  }
}
